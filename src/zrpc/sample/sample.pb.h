// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sample_2eproto;
class queryAgeReq;
struct queryAgeReqDefaultTypeInternal;
extern queryAgeReqDefaultTypeInternal _queryAgeReq_default_instance_;
class queryAgeRes;
struct queryAgeResDefaultTypeInternal;
extern queryAgeResDefaultTypeInternal _queryAgeRes_default_instance_;
class queryNameReq;
struct queryNameReqDefaultTypeInternal;
extern queryNameReqDefaultTypeInternal _queryNameReq_default_instance_;
class queryNameRes;
struct queryNameResDefaultTypeInternal;
extern queryNameResDefaultTypeInternal _queryNameRes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::queryAgeReq* Arena::CreateMaybeMessage<::queryAgeReq>(Arena*);
template<> ::queryAgeRes* Arena::CreateMaybeMessage<::queryAgeRes>(Arena*);
template<> ::queryNameReq* Arena::CreateMaybeMessage<::queryNameReq>(Arena*);
template<> ::queryNameRes* Arena::CreateMaybeMessage<::queryNameRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class queryAgeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryAgeReq) */ {
 public:
  inline queryAgeReq() : queryAgeReq(nullptr) {}
  ~queryAgeReq() override;
  explicit constexpr queryAgeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryAgeReq(const queryAgeReq& from);
  queryAgeReq(queryAgeReq&& from) noexcept
    : queryAgeReq() {
    *this = ::std::move(from);
  }

  inline queryAgeReq& operator=(const queryAgeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryAgeReq& operator=(queryAgeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryAgeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryAgeReq* internal_default_instance() {
    return reinterpret_cast<const queryAgeReq*>(
               &_queryAgeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(queryAgeReq& a, queryAgeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(queryAgeReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryAgeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryAgeReq* New() const final {
    return new queryAgeReq();
  }

  queryAgeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryAgeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryAgeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryAgeReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryAgeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryAgeReq";
  }
  protected:
  explicit queryAgeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqNoFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 req_no = 1;
  void clear_req_no();
  ::PROTOBUF_NAMESPACE_ID::int32 req_no() const;
  void set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_no() const;
  void _internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:queryAgeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class queryAgeRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryAgeRes) */ {
 public:
  inline queryAgeRes() : queryAgeRes(nullptr) {}
  ~queryAgeRes() override;
  explicit constexpr queryAgeRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryAgeRes(const queryAgeRes& from);
  queryAgeRes(queryAgeRes&& from) noexcept
    : queryAgeRes() {
    *this = ::std::move(from);
  }

  inline queryAgeRes& operator=(const queryAgeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryAgeRes& operator=(queryAgeRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryAgeRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryAgeRes* internal_default_instance() {
    return reinterpret_cast<const queryAgeRes*>(
               &_queryAgeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(queryAgeRes& a, queryAgeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(queryAgeRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryAgeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryAgeRes* New() const final {
    return new queryAgeRes();
  }

  queryAgeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryAgeRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryAgeRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryAgeRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryAgeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryAgeRes";
  }
  protected:
  explicit queryAgeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kReqNoFieldNumber = 3,
    kIdFieldNumber = 4,
    kAgeFieldNumber = 5,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_no = 3;
  void clear_req_no();
  ::PROTOBUF_NAMESPACE_ID::int32 req_no() const;
  void set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_no() const;
  void _internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 5;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:queryAgeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class queryNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryNameReq) */ {
 public:
  inline queryNameReq() : queryNameReq(nullptr) {}
  ~queryNameReq() override;
  explicit constexpr queryNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryNameReq(const queryNameReq& from);
  queryNameReq(queryNameReq&& from) noexcept
    : queryNameReq() {
    *this = ::std::move(from);
  }

  inline queryNameReq& operator=(const queryNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryNameReq& operator=(queryNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryNameReq* internal_default_instance() {
    return reinterpret_cast<const queryNameReq*>(
               &_queryNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(queryNameReq& a, queryNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(queryNameReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryNameReq* New() const final {
    return new queryNameReq();
  }

  queryNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryNameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryNameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryNameReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryNameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryNameReq";
  }
  protected:
  explicit queryNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqNoFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 req_no = 1;
  void clear_req_no();
  ::PROTOBUF_NAMESPACE_ID::int32 req_no() const;
  void set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_no() const;
  void _internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:queryNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class queryNameRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:queryNameRes) */ {
 public:
  inline queryNameRes() : queryNameRes(nullptr) {}
  ~queryNameRes() override;
  explicit constexpr queryNameRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  queryNameRes(const queryNameRes& from);
  queryNameRes(queryNameRes&& from) noexcept
    : queryNameRes() {
    *this = ::std::move(from);
  }

  inline queryNameRes& operator=(const queryNameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryNameRes& operator=(queryNameRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queryNameRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const queryNameRes* internal_default_instance() {
    return reinterpret_cast<const queryNameRes*>(
               &_queryNameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(queryNameRes& a, queryNameRes& b) {
    a.Swap(&b);
  }
  inline void Swap(queryNameRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queryNameRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryNameRes* New() const final {
    return new queryNameRes();
  }

  queryNameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryNameRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const queryNameRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const queryNameRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryNameRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "queryNameRes";
  }
  protected:
  explicit queryNameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kNameFieldNumber = 5,
    kRetCodeFieldNumber = 1,
    kReqNoFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code() const;
  void set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_code() const;
  void _internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_no = 3;
  void clear_req_no();
  ::PROTOBUF_NAMESPACE_ID::int32 req_no() const;
  void set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_no() const;
  void _internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:queryNameRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// ===================================================================

class QueryService_Stub;

class QueryService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline QueryService() {};
 public:
  virtual ~QueryService();

  typedef QueryService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void query_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryNameReq* request,
                       ::queryNameRes* response,
                       ::google::protobuf::Closure* done);
  virtual void query_age(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryAgeReq* request,
                       ::queryAgeRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueryService);
};

class QueryService_Stub : public QueryService {
 public:
  QueryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  QueryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~QueryService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements QueryService ------------------------------------------

  void query_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryNameReq* request,
                       ::queryNameRes* response,
                       ::google::protobuf::Closure* done);
  void query_age(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::queryAgeReq* request,
                       ::queryAgeRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueryService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// queryAgeReq

// int32 req_no = 1;
inline void queryAgeReq::clear_req_no() {
  req_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeReq::_internal_req_no() const {
  return req_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeReq::req_no() const {
  // @@protoc_insertion_point(field_get:queryAgeReq.req_no)
  return _internal_req_no();
}
inline void queryAgeReq::_internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_no_ = value;
}
inline void queryAgeReq::set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryAgeReq.req_no)
}

// int32 id = 2;
inline void queryAgeReq::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeReq::id() const {
  // @@protoc_insertion_point(field_get:queryAgeReq.id)
  return _internal_id();
}
inline void queryAgeReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void queryAgeReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:queryAgeReq.id)
}

// -------------------------------------------------------------------

// queryAgeRes

// int32 ret_code = 1;
inline void queryAgeRes::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::ret_code() const {
  // @@protoc_insertion_point(field_get:queryAgeRes.ret_code)
  return _internal_ret_code();
}
inline void queryAgeRes::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void queryAgeRes::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:queryAgeRes.ret_code)
}

// string res_info = 2;
inline void queryAgeRes::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& queryAgeRes::res_info() const {
  // @@protoc_insertion_point(field_get:queryAgeRes.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryAgeRes::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryAgeRes.res_info)
}
inline std::string* queryAgeRes::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:queryAgeRes.res_info)
  return _s;
}
inline const std::string& queryAgeRes::_internal_res_info() const {
  return res_info_.Get();
}
inline void queryAgeRes::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryAgeRes::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryAgeRes::release_res_info() {
  // @@protoc_insertion_point(field_release:queryAgeRes.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryAgeRes::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:queryAgeRes.res_info)
}

// int32 req_no = 3;
inline void queryAgeRes::clear_req_no() {
  req_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::_internal_req_no() const {
  return req_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::req_no() const {
  // @@protoc_insertion_point(field_get:queryAgeRes.req_no)
  return _internal_req_no();
}
inline void queryAgeRes::_internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_no_ = value;
}
inline void queryAgeRes::set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryAgeRes.req_no)
}

// int32 id = 4;
inline void queryAgeRes::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::id() const {
  // @@protoc_insertion_point(field_get:queryAgeRes.id)
  return _internal_id();
}
inline void queryAgeRes::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void queryAgeRes::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:queryAgeRes.id)
}

// int32 age = 5;
inline void queryAgeRes::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryAgeRes::age() const {
  // @@protoc_insertion_point(field_get:queryAgeRes.age)
  return _internal_age();
}
inline void queryAgeRes::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void queryAgeRes::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:queryAgeRes.age)
}

// -------------------------------------------------------------------

// queryNameReq

// int32 req_no = 1;
inline void queryNameReq::clear_req_no() {
  req_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::_internal_req_no() const {
  return req_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::req_no() const {
  // @@protoc_insertion_point(field_get:queryNameReq.req_no)
  return _internal_req_no();
}
inline void queryNameReq::_internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_no_ = value;
}
inline void queryNameReq::set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryNameReq.req_no)
}

// int32 id = 2;
inline void queryNameReq::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::id() const {
  // @@protoc_insertion_point(field_get:queryNameReq.id)
  return _internal_id();
}
inline void queryNameReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void queryNameReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:queryNameReq.id)
}

// int32 type = 3;
inline void queryNameReq::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameReq::type() const {
  // @@protoc_insertion_point(field_get:queryNameReq.type)
  return _internal_type();
}
inline void queryNameReq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void queryNameReq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:queryNameReq.type)
}

// -------------------------------------------------------------------

// queryNameRes

// int32 ret_code = 1;
inline void queryNameRes::clear_ret_code() {
  ret_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::_internal_ret_code() const {
  return ret_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::ret_code() const {
  // @@protoc_insertion_point(field_get:queryNameRes.ret_code)
  return _internal_ret_code();
}
inline void queryNameRes::_internal_set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_code_ = value;
}
inline void queryNameRes::set_ret_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:queryNameRes.ret_code)
}

// string res_info = 2;
inline void queryNameRes::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& queryNameRes::res_info() const {
  // @@protoc_insertion_point(field_get:queryNameRes.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryNameRes::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryNameRes.res_info)
}
inline std::string* queryNameRes::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:queryNameRes.res_info)
  return _s;
}
inline const std::string& queryNameRes::_internal_res_info() const {
  return res_info_.Get();
}
inline void queryNameRes::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryNameRes::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryNameRes::release_res_info() {
  // @@protoc_insertion_point(field_release:queryNameRes.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryNameRes::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:queryNameRes.res_info)
}

// int32 req_no = 3;
inline void queryNameRes::clear_req_no() {
  req_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::_internal_req_no() const {
  return req_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::req_no() const {
  // @@protoc_insertion_point(field_get:queryNameRes.req_no)
  return _internal_req_no();
}
inline void queryNameRes::_internal_set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_no_ = value;
}
inline void queryNameRes::set_req_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_no(value);
  // @@protoc_insertion_point(field_set:queryNameRes.req_no)
}

// int32 id = 4;
inline void queryNameRes::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 queryNameRes::id() const {
  // @@protoc_insertion_point(field_get:queryNameRes.id)
  return _internal_id();
}
inline void queryNameRes::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void queryNameRes::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:queryNameRes.id)
}

// string name = 5;
inline void queryNameRes::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& queryNameRes::name() const {
  // @@protoc_insertion_point(field_get:queryNameRes.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void queryNameRes::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:queryNameRes.name)
}
inline std::string* queryNameRes::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:queryNameRes.name)
  return _s;
}
inline const std::string& queryNameRes::_internal_name() const {
  return name_.Get();
}
inline void queryNameRes::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* queryNameRes::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* queryNameRes::release_name() {
  // @@protoc_insertion_point(field_release:queryNameRes.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void queryNameRes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:queryNameRes.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
