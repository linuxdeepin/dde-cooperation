// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionResult_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileCreate_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileEntry_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileRemove_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileRename_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileTransJobCancel_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileTransJobReport_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionMessage_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerInfo_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReadDirFiles_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FileDirectory_message_2eproto;
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> _instance;
  ::google::protobuf::internal::ArenaStringPtr error_;
  const ::PeerInfo* peer_info_;
} _LoginResponse_default_instance_;
class JsonMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JsonMessage> _instance;
} _JsonMessage_default_instance_;
class PeerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerInfo> _instance;
} _PeerInfo_default_instance_;
class OptionMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionMessage> _instance;
} _OptionMessage_default_instance_;
class FileEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileEntry> _instance;
} _FileEntry_default_instance_;
class FileDirectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDirectory> _instance;
} _FileDirectory_default_instance_;
class ActionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionResult> _instance;
} _ActionResult_default_instance_;
class ReadDirFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadDirFiles> _instance;
} _ReadDirFiles_default_instance_;
class FileRemoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileRemove> _instance;
  bool recursive_;
  ::google::protobuf::uint32 file_num_;
} _FileRemove_default_instance_;
class FileRenameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileRename> _instance;
} _FileRename_default_instance_;
class FileCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileCreate> _instance;
} _FileCreate_default_instance_;
class FileActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileAction> _instance;
  const ::ReadDirFiles* read_files_;
  const ::FileCreate* create_;
  const ::FileRemove* remove_;
  const ::FileRename* rename_;
} _FileAction_default_instance_;
class FileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileResponse> _instance;
  const ::FileDirectory* dir_;
  const ::ActionResult* result_;
} _FileResponse_default_instance_;
class FileTransResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransResponse> _instance;
} _FileTransResponse_default_instance_;
class FileTransJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransJob> _instance;
} _FileTransJob_default_instance_;
class FileTransCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransCreate> _instance;
} _FileTransCreate_default_instance_;
class FileTransBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransBlock> _instance;
} _FileTransBlock_default_instance_;
class FileTransJobCancelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransJobCancel> _instance;
} _FileTransJobCancel_default_instance_;
class FileTransJobReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransJobReport> _instance;
} _FileTransJobReport_default_instance_;
class FileTransUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTransUpdate> _instance;
  const ::FileTransJobCancel* cancel_;
  const ::FileTransJobReport* report_;
} _FileTransUpdate_default_instance_;
class ApplyTransFilesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTransFilesRequest> _instance;
} _ApplyTransFilesRequest_default_instance_;
class ApplyTransFilesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTransFilesResponse> _instance;
} _ApplyTransFilesResponse_default_instance_;
static void InitDefaultsLoginRequest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginRequest_default_instance_;
    new (ptr) ::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginRequest_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginRequest_message_2eproto}, {
      &scc_info_OptionMessage_message_2eproto.base,}};

static void InitDefaultsLoginResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginResponse_default_instance_;
    new (ptr) ::LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginResponse_message_2eproto}, {
      &scc_info_PeerInfo_message_2eproto.base,}};

static void InitDefaultsJsonMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JsonMessage_default_instance_;
    new (ptr) ::JsonMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JsonMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JsonMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJsonMessage_message_2eproto}, {}};

static void InitDefaultsPeerInfo_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PeerInfo_default_instance_;
    new (ptr) ::PeerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PeerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerInfo_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerInfo_message_2eproto}, {}};

static void InitDefaultsOptionMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OptionMessage_default_instance_;
    new (ptr) ::OptionMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OptionMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionMessage_message_2eproto}, {}};

static void InitDefaultsFileEntry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileEntry_default_instance_;
    new (ptr) ::FileEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileEntry_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileEntry_message_2eproto}, {}};

static void InitDefaultsFileDirectory_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileDirectory_default_instance_;
    new (ptr) ::FileDirectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileDirectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileDirectory_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileDirectory_message_2eproto}, {
      &scc_info_FileEntry_message_2eproto.base,}};

static void InitDefaultsActionResult_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActionResult_default_instance_;
    new (ptr) ::ActionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionResult_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionResult_message_2eproto}, {}};

static void InitDefaultsReadDirFiles_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadDirFiles_default_instance_;
    new (ptr) ::ReadDirFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReadDirFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadDirFiles_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadDirFiles_message_2eproto}, {}};

static void InitDefaultsFileRemove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileRemove_default_instance_;
    new (ptr) ::FileRemove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileRemove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileRemove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileRemove_message_2eproto}, {}};

static void InitDefaultsFileRename_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileRename_default_instance_;
    new (ptr) ::FileRename();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileRename::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileRename_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileRename_message_2eproto}, {}};

static void InitDefaultsFileCreate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileCreate_default_instance_;
    new (ptr) ::FileCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileCreate_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileCreate_message_2eproto}, {}};

static void InitDefaultsFileAction_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileAction_default_instance_;
    new (ptr) ::FileAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FileAction_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFileAction_message_2eproto}, {
      &scc_info_ReadDirFiles_message_2eproto.base,
      &scc_info_FileCreate_message_2eproto.base,
      &scc_info_FileRemove_message_2eproto.base,
      &scc_info_FileRename_message_2eproto.base,}};

static void InitDefaultsFileResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileResponse_default_instance_;
    new (ptr) ::FileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileResponse_message_2eproto}, {
      &scc_info_FileDirectory_message_2eproto.base,
      &scc_info_ActionResult_message_2eproto.base,}};

static void InitDefaultsFileTransResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransResponse_default_instance_;
    new (ptr) ::FileTransResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransResponse_message_2eproto}, {}};

static void InitDefaultsFileTransJob_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransJob_default_instance_;
    new (ptr) ::FileTransJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransJob_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransJob_message_2eproto}, {}};

static void InitDefaultsFileTransCreate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransCreate_default_instance_;
    new (ptr) ::FileTransCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileTransCreate_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileTransCreate_message_2eproto}, {
      &scc_info_FileEntry_message_2eproto.base,}};

static void InitDefaultsFileTransBlock_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransBlock_default_instance_;
    new (ptr) ::FileTransBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransBlock_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransBlock_message_2eproto}, {}};

static void InitDefaultsFileTransJobCancel_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransJobCancel_default_instance_;
    new (ptr) ::FileTransJobCancel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransJobCancel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransJobCancel_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransJobCancel_message_2eproto}, {}};

static void InitDefaultsFileTransJobReport_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransJobReport_default_instance_;
    new (ptr) ::FileTransJobReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransJobReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTransJobReport_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTransJobReport_message_2eproto}, {}};

static void InitDefaultsFileTransUpdate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileTransUpdate_default_instance_;
    new (ptr) ::FileTransUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileTransUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileTransUpdate_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileTransUpdate_message_2eproto}, {
      &scc_info_FileTransJobCancel_message_2eproto.base,
      &scc_info_FileTransJobReport_message_2eproto.base,}};

static void InitDefaultsApplyTransFilesRequest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplyTransFilesRequest_default_instance_;
    new (ptr) ::ApplyTransFilesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplyTransFilesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTransFilesRequest_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTransFilesRequest_message_2eproto}, {}};

static void InitDefaultsApplyTransFilesResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplyTransFilesResponse_default_instance_;
    new (ptr) ::ApplyTransFilesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplyTransFilesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTransFilesResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTransFilesResponse_message_2eproto}, {}};

void InitDefaults_message_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRequest_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginResponse_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JsonMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerInfo_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileEntry_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDirectory_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionResult_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadDirFiles_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileRemove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileRename_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileCreate_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileAction_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileResponse_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransResponse_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransJob_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransCreate_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransBlock_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransJobCancel_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransJobReport_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTransUpdate_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTransFilesRequest_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTransFilesResponse_message_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_message_2eproto[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_message_2eproto[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_message_2eproto[1];

const ::google::protobuf::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, name_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, auth_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, my_uid_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, my_name_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, version_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::LoginResponseDefaultTypeInternal, error_),
  offsetof(::LoginResponseDefaultTypeInternal, peer_info_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, token_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JsonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JsonMessage, app_),
  PROTOBUF_FIELD_OFFSET(::JsonMessage, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PeerInfo, username_),
  PROTOBUF_FIELD_OFFSET(::PeerInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::PeerInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::PeerInfo, version_),
  PROTOBUF_FIELD_OFFSET(::PeerInfo, privacy_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OptionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OptionMessage, feature_),
  PROTOBUF_FIELD_OFFSET(::OptionMessage, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileEntry, type_),
  PROTOBUF_FIELD_OFFSET(::FileEntry, name_),
  PROTOBUF_FIELD_OFFSET(::FileEntry, hidden_),
  PROTOBUF_FIELD_OFFSET(::FileEntry, size_),
  PROTOBUF_FIELD_OFFSET(::FileEntry, modified_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileDirectory, id_),
  PROTOBUF_FIELD_OFFSET(::FileDirectory, path_),
  PROTOBUF_FIELD_OFFSET(::FileDirectory, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionResult, id_),
  PROTOBUF_FIELD_OFFSET(::ActionResult, path_),
  PROTOBUF_FIELD_OFFSET(::ActionResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadDirFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReadDirFiles, id_),
  PROTOBUF_FIELD_OFFSET(::ReadDirFiles, path_),
  PROTOBUF_FIELD_OFFSET(::ReadDirFiles, include_hidden_),
  PROTOBUF_FIELD_OFFSET(::ReadDirFiles, recursive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::FileRemove, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileRemove, id_),
  PROTOBUF_FIELD_OFFSET(::FileRemove, path_),
  offsetof(::FileRemoveDefaultTypeInternal, recursive_),
  offsetof(::FileRemoveDefaultTypeInternal, file_num_),
  PROTOBUF_FIELD_OFFSET(::FileRemove, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileRename, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileRename, id_),
  PROTOBUF_FIELD_OFFSET(::FileRename, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileCreate, id_),
  PROTOBUF_FIELD_OFFSET(::FileCreate, path_),
  PROTOBUF_FIELD_OFFSET(::FileCreate, is_dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::FileAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::FileActionDefaultTypeInternal, read_files_),
  offsetof(::FileActionDefaultTypeInternal, create_),
  offsetof(::FileActionDefaultTypeInternal, remove_),
  offsetof(::FileActionDefaultTypeInternal, rename_),
  PROTOBUF_FIELD_OFFSET(::FileAction, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::FileResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::FileResponseDefaultTypeInternal, dir_),
  offsetof(::FileResponseDefaultTypeInternal, result_),
  PROTOBUF_FIELD_OFFSET(::FileResponse, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransResponse, id_),
  PROTOBUF_FIELD_OFFSET(::FileTransResponse, name_),
  PROTOBUF_FIELD_OFFSET(::FileTransResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransJob, job_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransJob, path_),
  PROTOBUF_FIELD_OFFSET(::FileTransJob, include_hidden_),
  PROTOBUF_FIELD_OFFSET(::FileTransJob, recursive_),
  PROTOBUF_FIELD_OFFSET(::FileTransJob, push_),
  PROTOBUF_FIELD_OFFSET(::FileTransJob, app_who_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransCreate, job_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransCreate, file_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransCreate, sub_dir_),
  PROTOBUF_FIELD_OFFSET(::FileTransCreate, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, job_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, file_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, filename_),
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, blk_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, data_),
  PROTOBUF_FIELD_OFFSET(::FileTransBlock, compressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransJobCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransJobCancel, job_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransJobCancel, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransJobReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileTransJobReport, job_id_),
  PROTOBUF_FIELD_OFFSET(::FileTransJobReport, path_),
  PROTOBUF_FIELD_OFFSET(::FileTransJobReport, error_),
  PROTOBUF_FIELD_OFFSET(::FileTransJobReport, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::FileTransUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::FileTransUpdateDefaultTypeInternal, cancel_),
  offsetof(::FileTransUpdateDefaultTypeInternal, report_),
  PROTOBUF_FIELD_OFFSET(::FileTransUpdate, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplyTransFilesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplyTransFilesRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplyTransFilesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplyTransFilesResponse, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LoginRequest)},
  { 13, -1, sizeof(::LoginResponse)},
  { 22, -1, sizeof(::JsonMessage)},
  { 29, -1, sizeof(::PeerInfo)},
  { 39, -1, sizeof(::OptionMessage)},
  { 46, -1, sizeof(::FileEntry)},
  { 56, -1, sizeof(::FileDirectory)},
  { 64, -1, sizeof(::ActionResult)},
  { 72, -1, sizeof(::ReadDirFiles)},
  { 81, -1, sizeof(::FileRemove)},
  { 91, -1, sizeof(::FileRename)},
  { 98, -1, sizeof(::FileCreate)},
  { 106, -1, sizeof(::FileAction)},
  { 116, -1, sizeof(::FileResponse)},
  { 124, -1, sizeof(::FileTransResponse)},
  { 132, -1, sizeof(::FileTransJob)},
  { 143, -1, sizeof(::FileTransCreate)},
  { 152, -1, sizeof(::FileTransBlock)},
  { 163, -1, sizeof(::FileTransJobCancel)},
  { 170, -1, sizeof(::FileTransJobReport)},
  { 179, -1, sizeof(::FileTransUpdate)},
  { 187, -1, sizeof(::ApplyTransFilesRequest)},
  { 193, -1, sizeof(::ApplyTransFilesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_JsonMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PeerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OptionMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ActionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ReadDirFiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileRename_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransJobCancel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransJobReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileTransUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ApplyTransFilesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ApplyTransFilesResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_message_2eproto = {
  {}, AddDescriptors_message_2eproto, "message.proto", schemas,
  file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 23, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

const char descriptor_table_protodef_message_2eproto[] =
  "\n\rmessage.proto\"\235\001\n\014LoginRequest\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004auth\030\002 \001(\014\022\016\n\006my_uid\030\004 \001(\t\022\017\n\007"
  "my_name\030\005 \001(\t\022\022\n\nsession_id\030\006 \001(\t\022\017\n\007ver"
  "sion\030\007 \001(\t\022\n\n\002ip\030\010 \001(\t\022\037\n\007options\030\t \003(\0132"
  "\016.OptionMessage\"X\n\rLoginResponse\022\017\n\005erro"
  "r\030\001 \001(\tH\000\022\036\n\tpeer_info\030\002 \001(\0132\t.PeerInfoH"
  "\000\022\r\n\005token\030\003 \001(\014B\007\n\005union\"(\n\013JsonMessage"
  "\022\013\n\003app\030\001 \001(\t\022\014\n\004json\030\002 \001(\t\"g\n\010PeerInfo\022"
  "\020\n\010username\030\001 \001(\t\022\020\n\010hostname\030\002 \001(\t\022\020\n\010p"
  "latform\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\022\024\n\014privac"
  "y_mode\030\005 \001(\010\"0\n\rOptionMessage\022\017\n\007feature"
  "\030\001 \001(\t\022\016\n\006enable\030\002 \001(\010\"g\n\tFileEntry\022\027\n\004t"
  "ype\030\001 \001(\0162\t.FileType\022\014\n\004name\030\002 \001(\t\022\016\n\006hi"
  "dden\030\003 \001(\010\022\014\n\004size\030\004 \001(\003\022\025\n\rmodified_tim"
  "e\030\005 \001(\003\"F\n\rFileDirectory\022\n\n\002id\030\001 \001(\005\022\014\n\004"
  "path\030\002 \001(\t\022\033\n\007entries\030\003 \003(\0132\n.FileEntry\""
  "8\n\014ActionResult\022\n\n\002id\030\001 \001(\005\022\014\n\004path\030\002 \001("
  "\t\022\016\n\006result\030\003 \001(\010\"S\n\014ReadDirFiles\022\n\n\002id\030"
  "\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\026\n\016include_hidden\030\003 "
  "\001(\010\022\021\n\trecursive\030\004 \001(\010\"X\n\nFileRemove\022\n\n\002"
  "id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\023\n\trecursive\030\003 \001("
  "\010H\000\022\022\n\010file_num\030\004 \001(\rH\000B\007\n\005union\"&\n\nFile"
  "Rename\022\n\n\002id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\"6\n\nFile"
  "Create\022\n\n\002id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\016\n\006is_d"
  "ir\030\003 \001(\010\"\227\001\n\nFileAction\022#\n\nread_files\030\001 "
  "\001(\0132\r.ReadDirFilesH\000\022\035\n\006create\030\002 \001(\0132\013.F"
  "ileCreateH\000\022\035\n\006remove\030\003 \001(\0132\013.FileRemove"
  "H\000\022\035\n\006rename\030\004 \001(\0132\013.FileRenameH\000B\007\n\005uni"
  "on\"W\n\014FileResponse\022\035\n\003dir\030\001 \001(\0132\016.FileDi"
  "rectoryH\000\022\037\n\006result\030\002 \001(\0132\r.ActionResult"
  "H\000B\007\n\005union\"K\n\021FileTransResponse\022\n\n\002id\030\001"
  " \001(\005\022\014\n\004name\030\002 \001(\t\022\034\n\006result\030\003 \001(\0162\014.Fil"
  "eTransRe\"v\n\014FileTransJob\022\016\n\006job_id\030\001 \001(\005"
  "\022\014\n\004path\030\002 \001(\t\022\026\n\016include_hidden\030\003 \001(\010\022\021"
  "\n\trecursive\030\004 \001(\010\022\014\n\004push\030\005 \001(\010\022\017\n\007app_w"
  "ho\030\006 \001(\t\"^\n\017FileTransCreate\022\016\n\006job_id\030\001 "
  "\001(\005\022\017\n\007file_id\030\002 \001(\005\022\017\n\007sub_dir\030\003 \001(\t\022\031\n"
  "\005entry\030\004 \001(\0132\n.FileEntry\"u\n\016FileTransBlo"
  "ck\022\016\n\006job_id\030\001 \001(\005\022\017\n\007file_id\030\002 \001(\005\022\020\n\010f"
  "ilename\030\003 \001(\t\022\016\n\006blk_id\030\004 \001(\r\022\014\n\004data\030\005 "
  "\001(\014\022\022\n\ncompressed\030\006 \001(\010\"2\n\022FileTransJobC"
  "ancel\022\016\n\006job_id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\"_\n\022F"
  "ileTransJobReport\022\016\n\006job_id\030\001 \001(\005\022\014\n\004pat"
  "h\030\002 \001(\t\022\r\n\005error\030\003 \001(\t\022\034\n\006result\030\004 \001(\0162\014"
  ".FileTransRe\"h\n\017FileTransUpdate\022%\n\006cance"
  "l\030\001 \001(\0132\023.FileTransJobCancelH\000\022%\n\006report"
  "\030\002 \001(\0132\023.FileTransJobReportH\000B\007\n\005union\"%"
  "\n\026ApplyTransFilesRequest\022\013\n\003msg\030\001 \001(\t\")\n"
  "\027ApplyTransFilesResponse\022\016\n\006result\030\001 \001(\010"
  "*<\n\010FileType\022\007\n\003DIR\020\000\022\014\n\010DIR_LINK\020\001\022\n\n\006F"
  "ILE_B\020\002\022\r\n\tFILE_LINK\020\003*0\n\013FileTransRe\022\014\n"
  "\010IO_ERROR\020\000\022\006\n\002OK\020\001\022\013\n\007FINIASH\020\0022\323\003\n\rRem"
  "oteService\022&\n\005login\022\r.LoginRequest\032\016.Log"
  "inResponse\022&\n\016query_peerinfo\022\t.PeerInfo\032"
  "\t.PeerInfo\022\"\n\004misc\022\014.JsonMessage\032\014.JsonM"
  "essage\022&\n\010fsaction\022\013.FileAction\032\r.FileRe"
  "sponse\0222\n\rfiletrans_job\022\r.FileTransJob\032\022"
  ".FileTransResponse\0228\n\020filetrans_create\022\020"
  ".FileTransCreate\032\022.FileTransResponse\0226\n\017"
  "filetrans_block\022\017.FileTransBlock\032\022.FileT"
  "ransResponse\0228\n\020filetrans_update\022\020.FileT"
  "ransUpdate\032\022.FileTransResponse\022F\n\021apply_"
  "trans_files\022\027.ApplyTransFilesRequest\032\030.A"
  "pplyTransFilesResponseB\016\n\007uniapisP\001\200\001\001b\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, InitDefaults_message_2eproto, 
  descriptor_table_protodef_message_2eproto,
  "message.proto", &assign_descriptors_table_message_2eproto, 2566,
};

void AddDescriptors_message_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_message_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = []() { AddDescriptors_message_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileTransRe_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool FileTransRe_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kNameFieldNumber;
const int LoginRequest::kAuthFieldNumber;
const int LoginRequest::kMyUidFieldNumber;
const int LoginRequest::kMyNameFieldNumber;
const int LoginRequest::kSessionIdFieldNumber;
const int LoginRequest::kVersionFieldNumber;
const int LoginRequest::kIpFieldNumber;
const int LoginRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      options_(from.options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth().size() > 0) {
    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  my_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.my_uid().size() > 0) {
    my_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_uid_);
  }
  my_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.my_name().size() > 0) {
    my_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_name_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginRequest_message_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginRequest_message_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes auth = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_auth();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string my_uid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.my_uid");
        object = msg->mutable_my_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string my_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.my_name");
        object = msg->mutable_my_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string session_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.session_id");
        object = msg->mutable_session_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ip = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginRequest.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .OptionMessage options = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::OptionMessage::_InternalParse;
          object = msg->add_options();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes auth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string my_uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->my_uid().data(), static_cast<int>(this->my_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.my_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string my_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->my_name().data(), static_cast<int>(this->my_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.my_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequest.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OptionMessage options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes auth = 2;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->auth(), output);
  }

  // string my_uid = 4;
  if (this->my_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->my_uid().data(), static_cast<int>(this->my_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.my_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->my_uid(), output);
  }

  // string my_name = 5;
  if (this->my_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->my_name().data(), static_cast<int>(this->my_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.my_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->my_name(), output);
  }

  // string session_id = 6;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->session_id(), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // string ip = 8;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ip(), output);
  }

  // repeated .OptionMessage options = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->options(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes auth = 2;
  if (this->auth().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->auth(), target);
  }

  // string my_uid = 4;
  if (this->my_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->my_uid().data(), static_cast<int>(this->my_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.my_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->my_uid(), target);
  }

  // string my_name = 5;
  if (this->my_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->my_name().data(), static_cast<int>(this->my_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.my_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->my_name(), target);
  }

  // string session_id = 6;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->session_id(), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // string ip = 8;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }

  // repeated .OptionMessage options = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->options(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OptionMessage options = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->options_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->options(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes auth = 2;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->auth());
  }

  // string my_uid = 4;
  if (this->my_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->my_uid());
  }

  // string my_name = 5;
  if (this->my_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->my_name());
  }

  // string session_id = 6;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string ip = 8;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.my_uid().size() > 0) {

    my_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_uid_);
  }
  if (from.my_name().size() > 0) {

    my_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&options_)->InternalSwap(CastToBase(&other->options_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_.Swap(&other->auth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  my_uid_.Swap(&other->my_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  my_name_.Swap(&other->my_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
  ::_LoginResponse_default_instance_.error_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_LoginResponse_default_instance_.peer_info_ = const_cast< ::PeerInfo*>(
      ::PeerInfo::internal_default_instance());
}
class LoginResponse::HasBitSetters {
 public:
  static const ::PeerInfo& peer_info(const LoginResponse* msg);
};

const ::PeerInfo&
LoginResponse::HasBitSetters::peer_info(const LoginResponse* msg) {
  return *msg->union_.peer_info_;
}
void LoginResponse::set_allocated_peer_info(::PeerInfo* peer_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (peer_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer_info, submessage_arena);
    }
    set_has_peer_info();
    union_.peer_info_ = peer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.peer_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kErrorFieldNumber;
const int LoginResponse::kPeerInfoFieldNumber;
const int LoginResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  clear_has_union();
  switch (from.union_case()) {
    case kError: {
      set_error(from.error());
      break;
    }
    case kPeerInfo: {
      mutable_peer_info()->::PeerInfo::MergeFrom(from.peer_info());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginResponse_message_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_union();
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_union()) {
    clear_union();
  }
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginResponse_message_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:LoginResponse)
  switch (union_case()) {
    case kError: {
      union_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPeerInfo: {
      delete union_.peer_info_;
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_union();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("LoginResponse.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .PeerInfo peer_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PeerInfo::_InternalParse;
        object = msg->mutable_peer_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PeerInfo peer_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // .PeerInfo peer_info = 2;
  if (has_peer_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peer_info(this), output);
  }

  // bytes token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // .PeerInfo peer_info = 2;
  if (has_peer_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peer_info(this), target);
  }

  // bytes token = 3;
  if (this->token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }

  switch (union_case()) {
    // string error = 1;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
      break;
    }
    // .PeerInfo peer_info = 2;
    case kPeerInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.peer_info_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  switch (from.union_case()) {
    case kError: {
      set_error(from.error());
      break;
    }
    case kPeerInfo: {
      mutable_peer_info()->::PeerInfo::MergeFrom(from.peer_info());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JsonMessage::InitAsDefaultInstance() {
}
class JsonMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JsonMessage::kAppFieldNumber;
const int JsonMessage::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JsonMessage::JsonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JsonMessage)
}
JsonMessage::JsonMessage(const JsonMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app().size() > 0) {
    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:JsonMessage)
}

void JsonMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JsonMessage_message_2eproto.base);
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JsonMessage::~JsonMessage() {
  // @@protoc_insertion_point(destructor:JsonMessage)
  SharedDtor();
}

void JsonMessage::SharedDtor() {
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JsonMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JsonMessage& JsonMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JsonMessage_message_2eproto.base);
  return *internal_default_instance();
}


void JsonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JsonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JsonMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JsonMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string app = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("JsonMessage.app");
        object = msg->mutable_app();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string json = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("JsonMessage.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JsonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JsonMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app().data(), static_cast<int>(this->app().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JsonMessage.app"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JsonMessage.json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JsonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JsonMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JsonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JsonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app = 1;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JsonMessage.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app(), output);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JsonMessage.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JsonMessage)
}

::google::protobuf::uint8* JsonMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JsonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app = 1;
  if (this->app().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JsonMessage.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app(), target);
  }

  // string json = 2;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JsonMessage.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JsonMessage)
  return target;
}

size_t JsonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JsonMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app = 1;
  if (this->app().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app());
  }

  // string json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JsonMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JsonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const JsonMessage* source =
      ::google::protobuf::DynamicCastToGenerated<JsonMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JsonMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JsonMessage)
    MergeFrom(*source);
  }
}

void JsonMessage::MergeFrom(const JsonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JsonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app().size() > 0) {

    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void JsonMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JsonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JsonMessage::CopyFrom(const JsonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JsonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsonMessage::IsInitialized() const {
  return true;
}

void JsonMessage::Swap(JsonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JsonMessage::InternalSwap(JsonMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_.Swap(&other->app_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata JsonMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerInfo::InitAsDefaultInstance() {
}
class PeerInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfo::kUsernameFieldNumber;
const int PeerInfo::kHostnameFieldNumber;
const int PeerInfo::kPlatformFieldNumber;
const int PeerInfo::kVersionFieldNumber;
const int PeerInfo::kPrivacyModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfo::PeerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.platform().size() > 0) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  privacy_mode_ = from.privacy_mode_;
  // @@protoc_insertion_point(copy_constructor:PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerInfo_message_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_mode_ = false;
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerInfo& PeerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerInfo_message_2eproto.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_mode_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("PeerInfo.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string hostname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("PeerInfo.hostname");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string platform = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("PeerInfo.platform");
        object = msg->mutable_platform();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("PeerInfo.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool privacy_mode = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_privacy_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PeerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PeerInfo.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PeerInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PeerInfo.platform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PeerInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool privacy_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacy_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PeerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // bool privacy_mode = 5;
  if (this->privacy_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->privacy_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PeerInfo)
}

::google::protobuf::uint8* PeerInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PeerInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // bool privacy_mode = 5;
  if (this->privacy_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->privacy_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PeerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bool privacy_mode = 5;
  if (this->privacy_mode() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PeerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.platform().size() > 0) {

    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.privacy_mode() != 0) {
    set_privacy_mode(from.privacy_mode());
  }
}

void PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::Swap(PeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_.Swap(&other->platform_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(privacy_mode_, other->privacy_mode_);
}

::google::protobuf::Metadata PeerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OptionMessage::InitAsDefaultInstance() {
}
class OptionMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionMessage::kFeatureFieldNumber;
const int OptionMessage::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionMessage::OptionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptionMessage)
}
OptionMessage::OptionMessage(const OptionMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feature().size() > 0) {
    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:OptionMessage)
}

void OptionMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OptionMessage_message_2eproto.base);
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
}

OptionMessage::~OptionMessage() {
  // @@protoc_insertion_point(destructor:OptionMessage)
  SharedDtor();
}

void OptionMessage::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionMessage& OptionMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OptionMessage_message_2eproto.base);
  return *internal_default_instance();
}


void OptionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OptionMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string feature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("OptionMessage.feature");
        object = msg->mutable_feature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool enable = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptionMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feature().data(), static_cast<int>(this->feature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OptionMessage.feature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptionMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feature = 1;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), static_cast<int>(this->feature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionMessage.feature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feature(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptionMessage)
}

::google::protobuf::uint8* OptionMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OptionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feature = 1;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), static_cast<int>(this->feature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionMessage.feature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feature(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionMessage)
  return target;
}

size_t OptionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feature = 1;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feature());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionMessage* source =
      ::google::protobuf::DynamicCastToGenerated<OptionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptionMessage)
    MergeFrom(*source);
  }
}

void OptionMessage::MergeFrom(const OptionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void OptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionMessage::CopyFrom(const OptionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionMessage::IsInitialized() const {
  return true;
}

void OptionMessage::Swap(OptionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionMessage::InternalSwap(OptionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_.Swap(&other->feature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_, other->enable_);
}

::google::protobuf::Metadata OptionMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileEntry::InitAsDefaultInstance() {
}
class FileEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileEntry::kTypeFieldNumber;
const int FileEntry::kNameFieldNumber;
const int FileEntry::kHiddenFieldNumber;
const int FileEntry::kSizeFieldNumber;
const int FileEntry::kModifiedTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileEntry::FileEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileEntry)
}
FileEntry::FileEntry(const FileEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&modified_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(modified_time_));
  // @@protoc_insertion_point(copy_constructor:FileEntry)
}

void FileEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileEntry_message_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(modified_time_));
}

FileEntry::~FileEntry() {
  // @@protoc_insertion_point(destructor:FileEntry)
  SharedDtor();
}

void FileEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileEntry& FileEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileEntry_message_2eproto.base);
  return *internal_default_instance();
}


void FileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(modified_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .FileType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::FileType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileEntry.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool hidden = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hidden(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 modified_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_modified_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FileType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hidden = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 modified_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modified_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bool hidden = 3;
  if (this->hidden() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hidden(), output);
  }

  // int64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->size(), output);
  }

  // int64 modified_time = 5;
  if (this->modified_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->modified_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileEntry)
}

::google::protobuf::uint8* FileEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bool hidden = 3;
  if (this->hidden() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hidden(), target);
  }

  // int64 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->size(), target);
  }

  // int64 modified_time = 5;
  if (this->modified_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->modified_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileEntry)
  return target;
}

size_t FileEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .FileType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool hidden = 3;
  if (this->hidden() != 0) {
    total_size += 1 + 1;
  }

  // int64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // int64 modified_time = 5;
  if (this->modified_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->modified_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const FileEntry* source =
      ::google::protobuf::DynamicCastToGenerated<FileEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileEntry)
    MergeFrom(*source);
  }
}

void FileEntry::MergeFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.hidden() != 0) {
    set_hidden(from.hidden());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.modified_time() != 0) {
    set_modified_time(from.modified_time());
  }
}

void FileEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileEntry::CopyFrom(const FileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileEntry::IsInitialized() const {
  return true;
}

void FileEntry::Swap(FileEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileEntry::InternalSwap(FileEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(hidden_, other->hidden_);
  swap(size_, other->size_);
  swap(modified_time_, other->modified_time_);
}

::google::protobuf::Metadata FileEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileDirectory::InitAsDefaultInstance() {
}
class FileDirectory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDirectory::kIdFieldNumber;
const int FileDirectory::kPathFieldNumber;
const int FileDirectory::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDirectory::FileDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileDirectory)
}
FileDirectory::FileDirectory(const FileDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:FileDirectory)
}

void FileDirectory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileDirectory_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

FileDirectory::~FileDirectory() {
  // @@protoc_insertion_point(destructor:FileDirectory)
  SharedDtor();
}

void FileDirectory::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileDirectory& FileDirectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileDirectory_message_2eproto.base);
  return *internal_default_instance();
}


void FileDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:FileDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileDirectory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileDirectory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileDirectory.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .FileEntry entries = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::FileEntry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileDirectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileDirectory.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FileEntry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileDirectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileDirectory.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // repeated .FileEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileDirectory)
}

::google::protobuf::uint8* FileDirectory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileDirectory.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // repeated .FileEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileDirectory)
  return target;
}

size_t FileDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileDirectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FileEntry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const FileDirectory* source =
      ::google::protobuf::DynamicCastToGenerated<FileDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileDirectory)
    MergeFrom(*source);
  }
}

void FileDirectory::MergeFrom(const FileDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void FileDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDirectory::CopyFrom(const FileDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDirectory::IsInitialized() const {
  return true;
}

void FileDirectory::Swap(FileDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDirectory::InternalSwap(FileDirectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata FileDirectory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActionResult::InitAsDefaultInstance() {
}
class ActionResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionResult::kIdFieldNumber;
const int ActionResult::kPathFieldNumber;
const int ActionResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionResult::ActionResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActionResult)
}
ActionResult::ActionResult(const ActionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ActionResult)
}

void ActionResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActionResult_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
}

ActionResult::~ActionResult() {
  // @@protoc_insertion_point(destructor:ActionResult)
  SharedDtor();
}

void ActionResult::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionResult& ActionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActionResult_message_2eproto.base);
  return *internal_default_instance();
}


void ActionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActionResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ActionResult.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ActionResult.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ActionResult.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActionResult)
}

::google::protobuf::uint8* ActionResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ActionResult.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionResult)
  return target;
}

size_t ActionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionResult* source =
      ::google::protobuf::DynamicCastToGenerated<ActionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActionResult)
    MergeFrom(*source);
  }
}

void ActionResult::MergeFrom(const ActionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ActionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionResult::CopyFrom(const ActionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionResult::IsInitialized() const {
  return true;
}

void ActionResult::Swap(ActionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionResult::InternalSwap(ActionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata ActionResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReadDirFiles::InitAsDefaultInstance() {
}
class ReadDirFiles::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadDirFiles::kIdFieldNumber;
const int ReadDirFiles::kPathFieldNumber;
const int ReadDirFiles::kIncludeHiddenFieldNumber;
const int ReadDirFiles::kRecursiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadDirFiles::ReadDirFiles()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadDirFiles)
}
ReadDirFiles::ReadDirFiles(const ReadDirFiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recursive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(recursive_));
  // @@protoc_insertion_point(copy_constructor:ReadDirFiles)
}

void ReadDirFiles::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReadDirFiles_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recursive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(recursive_));
}

ReadDirFiles::~ReadDirFiles() {
  // @@protoc_insertion_point(destructor:ReadDirFiles)
  SharedDtor();
}

void ReadDirFiles::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadDirFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDirFiles& ReadDirFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadDirFiles_message_2eproto.base);
  return *internal_default_instance();
}


void ReadDirFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadDirFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recursive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(recursive_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadDirFiles::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadDirFiles*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ReadDirFiles.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool include_hidden = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_include_hidden(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool recursive = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_recursive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadDirFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadDirFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ReadDirFiles.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_hidden = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recursive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recursive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadDirFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadDirFiles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadDirFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadDirFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ReadDirFiles.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_hidden(), output);
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recursive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReadDirFiles)
}

::google::protobuf::uint8* ReadDirFiles::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadDirFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ReadDirFiles.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_hidden(), target);
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recursive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadDirFiles)
  return target;
}

size_t ReadDirFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadDirFiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDirFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadDirFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDirFiles* source =
      ::google::protobuf::DynamicCastToGenerated<ReadDirFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadDirFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadDirFiles)
    MergeFrom(*source);
  }
}

void ReadDirFiles::MergeFrom(const ReadDirFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadDirFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.include_hidden() != 0) {
    set_include_hidden(from.include_hidden());
  }
  if (from.recursive() != 0) {
    set_recursive(from.recursive());
  }
}

void ReadDirFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadDirFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDirFiles::CopyFrom(const ReadDirFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadDirFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDirFiles::IsInitialized() const {
  return true;
}

void ReadDirFiles::Swap(ReadDirFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadDirFiles::InternalSwap(ReadDirFiles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(include_hidden_, other->include_hidden_);
  swap(recursive_, other->recursive_);
}

::google::protobuf::Metadata ReadDirFiles::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileRemove::InitAsDefaultInstance() {
  ::_FileRemove_default_instance_.recursive_ = false;
  ::_FileRemove_default_instance_.file_num_ = 0u;
}
class FileRemove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRemove::kIdFieldNumber;
const int FileRemove::kPathFieldNumber;
const int FileRemove::kRecursiveFieldNumber;
const int FileRemove::kFileNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRemove::FileRemove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileRemove)
}
FileRemove::FileRemove(const FileRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  id_ = from.id_;
  clear_has_union();
  switch (from.union_case()) {
    case kRecursive: {
      set_recursive(from.recursive());
      break;
    }
    case kFileNum: {
      set_file_num(from.file_num());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FileRemove)
}

void FileRemove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileRemove_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_has_union();
}

FileRemove::~FileRemove() {
  // @@protoc_insertion_point(destructor:FileRemove)
  SharedDtor();
}

void FileRemove::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_union()) {
    clear_union();
  }
}

void FileRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRemove& FileRemove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileRemove_message_2eproto.base);
  return *internal_default_instance();
}


void FileRemove::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:FileRemove)
  switch (union_case()) {
    case kRecursive: {
      // No need to clear
      break;
    }
    case kFileNum: {
      // No need to clear
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void FileRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:FileRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_union();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileRemove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileRemove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileRemove.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool recursive = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_recursive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 file_num = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_file_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileRemove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileRemove.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recursive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_union();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &union_.recursive_)));
          set_has_recursive();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          clear_union();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &union_.file_num_)));
          set_has_file_num();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileRemove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRemove.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool recursive = 3;
  if (has_recursive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->recursive(), output);
  }

  // uint32 file_num = 4;
  if (has_file_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileRemove)
}

::google::protobuf::uint8* FileRemove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRemove.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool recursive = 3;
  if (has_recursive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->recursive(), target);
  }

  // uint32 file_num = 4;
  if (has_file_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->file_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileRemove)
  return target;
}

size_t FileRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (union_case()) {
    // bool recursive = 3;
    case kRecursive: {
      total_size += 1 + 1;
      break;
    }
    // uint32 file_num = 4;
    case kFileNum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_num());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRemove* source =
      ::google::protobuf::DynamicCastToGenerated<FileRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileRemove)
    MergeFrom(*source);
  }
}

void FileRemove::MergeFrom(const FileRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.union_case()) {
    case kRecursive: {
      set_recursive(from.recursive());
      break;
    }
    case kFileNum: {
      set_file_num(from.file_num());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void FileRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRemove::CopyFrom(const FileRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRemove::IsInitialized() const {
  return true;
}

void FileRemove::Swap(FileRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRemove::InternalSwap(FileRemove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FileRemove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileRename::InitAsDefaultInstance() {
}
class FileRename::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRename::kIdFieldNumber;
const int FileRename::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRename::FileRename()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileRename)
}
FileRename::FileRename(const FileRename& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:FileRename)
}

void FileRename::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileRename_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

FileRename::~FileRename() {
  // @@protoc_insertion_point(destructor:FileRename)
  SharedDtor();
}

void FileRename::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileRename::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRename& FileRename::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileRename_message_2eproto.base);
  return *internal_default_instance();
}


void FileRename::Clear() {
// @@protoc_insertion_point(message_clear_start:FileRename)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileRename::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileRename*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileRename.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileRename::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileRename)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileRename.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileRename)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileRename)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileRename::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileRename)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRename.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileRename)
}

::google::protobuf::uint8* FileRename::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileRename)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRename.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileRename)
  return target;
}

size_t FileRename::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileRename)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRename::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileRename)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRename* source =
      ::google::protobuf::DynamicCastToGenerated<FileRename>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileRename)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileRename)
    MergeFrom(*source);
  }
}

void FileRename::MergeFrom(const FileRename& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileRename)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void FileRename::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRename::CopyFrom(const FileRename& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileRename)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRename::IsInitialized() const {
  return true;
}

void FileRename::Swap(FileRename* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRename::InternalSwap(FileRename* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata FileRename::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileCreate::InitAsDefaultInstance() {
}
class FileCreate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileCreate::kIdFieldNumber;
const int FileCreate::kPathFieldNumber;
const int FileCreate::kIsDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileCreate::FileCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileCreate)
}
FileCreate::FileCreate(const FileCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dir_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_dir_));
  // @@protoc_insertion_point(copy_constructor:FileCreate)
}

void FileCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileCreate_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dir_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_dir_));
}

FileCreate::~FileCreate() {
  // @@protoc_insertion_point(destructor:FileCreate)
  SharedDtor();
}

void FileCreate::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileCreate& FileCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileCreate_message_2eproto.base);
  return *internal_default_instance();
}


void FileCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:FileCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dir_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_dir_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileCreate.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_dir = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_dir(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileCreate.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileCreate.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool is_dir = 3;
  if (this->is_dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileCreate)
}

::google::protobuf::uint8* FileCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileCreate.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool is_dir = 3;
  if (this->is_dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileCreate)
  return target;
}

size_t FileCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool is_dir = 3;
  if (this->is_dir() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const FileCreate* source =
      ::google::protobuf::DynamicCastToGenerated<FileCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileCreate)
    MergeFrom(*source);
  }
}

void FileCreate::MergeFrom(const FileCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_dir() != 0) {
    set_is_dir(from.is_dir());
  }
}

void FileCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileCreate::CopyFrom(const FileCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCreate::IsInitialized() const {
  return true;
}

void FileCreate::Swap(FileCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileCreate::InternalSwap(FileCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(is_dir_, other->is_dir_);
}

::google::protobuf::Metadata FileCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileAction::InitAsDefaultInstance() {
  ::_FileAction_default_instance_.read_files_ = const_cast< ::ReadDirFiles*>(
      ::ReadDirFiles::internal_default_instance());
  ::_FileAction_default_instance_.create_ = const_cast< ::FileCreate*>(
      ::FileCreate::internal_default_instance());
  ::_FileAction_default_instance_.remove_ = const_cast< ::FileRemove*>(
      ::FileRemove::internal_default_instance());
  ::_FileAction_default_instance_.rename_ = const_cast< ::FileRename*>(
      ::FileRename::internal_default_instance());
}
class FileAction::HasBitSetters {
 public:
  static const ::ReadDirFiles& read_files(const FileAction* msg);
  static const ::FileCreate& create(const FileAction* msg);
  static const ::FileRemove& remove(const FileAction* msg);
  static const ::FileRename& rename(const FileAction* msg);
};

const ::ReadDirFiles&
FileAction::HasBitSetters::read_files(const FileAction* msg) {
  return *msg->union_.read_files_;
}
const ::FileCreate&
FileAction::HasBitSetters::create(const FileAction* msg) {
  return *msg->union_.create_;
}
const ::FileRemove&
FileAction::HasBitSetters::remove(const FileAction* msg) {
  return *msg->union_.remove_;
}
const ::FileRename&
FileAction::HasBitSetters::rename(const FileAction* msg) {
  return *msg->union_.rename_;
}
void FileAction::set_allocated_read_files(::ReadDirFiles* read_files) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (read_files) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_files = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_files, submessage_arena);
    }
    set_has_read_files();
    union_.read_files_ = read_files;
  }
  // @@protoc_insertion_point(field_set_allocated:FileAction.read_files)
}
void FileAction::set_allocated_create(::FileCreate* create) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (create) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create, submessage_arena);
    }
    set_has_create();
    union_.create_ = create;
  }
  // @@protoc_insertion_point(field_set_allocated:FileAction.create)
}
void FileAction::set_allocated_remove(::FileRemove* remove) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (remove) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remove = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remove, submessage_arena);
    }
    set_has_remove();
    union_.remove_ = remove;
  }
  // @@protoc_insertion_point(field_set_allocated:FileAction.remove)
}
void FileAction::set_allocated_rename(::FileRename* rename) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (rename) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rename = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rename, submessage_arena);
    }
    set_has_rename();
    union_.rename_ = rename;
  }
  // @@protoc_insertion_point(field_set_allocated:FileAction.rename)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileAction::kReadFilesFieldNumber;
const int FileAction::kCreateFieldNumber;
const int FileAction::kRemoveFieldNumber;
const int FileAction::kRenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileAction::FileAction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileAction)
}
FileAction::FileAction(const FileAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_union();
  switch (from.union_case()) {
    case kReadFiles: {
      mutable_read_files()->::ReadDirFiles::MergeFrom(from.read_files());
      break;
    }
    case kCreate: {
      mutable_create()->::FileCreate::MergeFrom(from.create());
      break;
    }
    case kRemove: {
      mutable_remove()->::FileRemove::MergeFrom(from.remove());
      break;
    }
    case kRename: {
      mutable_rename()->::FileRename::MergeFrom(from.rename());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FileAction)
}

void FileAction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileAction_message_2eproto.base);
  clear_has_union();
}

FileAction::~FileAction() {
  // @@protoc_insertion_point(destructor:FileAction)
  SharedDtor();
}

void FileAction::SharedDtor() {
  if (has_union()) {
    clear_union();
  }
}

void FileAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileAction& FileAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileAction_message_2eproto.base);
  return *internal_default_instance();
}


void FileAction::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:FileAction)
  switch (union_case()) {
    case kReadFiles: {
      delete union_.read_files_;
      break;
    }
    case kCreate: {
      delete union_.create_;
      break;
    }
    case kRemove: {
      delete union_.remove_;
      break;
    }
    case kRename: {
      delete union_.rename_;
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void FileAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FileAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_union();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileAction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileAction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ReadDirFiles read_files = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReadDirFiles::_InternalParse;
        object = msg->mutable_read_files();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .FileCreate create = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileCreate::_InternalParse;
        object = msg->mutable_create();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .FileRemove remove = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileRemove::_InternalParse;
        object = msg->mutable_remove();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .FileRename rename = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileRename::_InternalParse;
        object = msg->mutable_rename();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ReadDirFiles read_files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileCreate create = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileRemove remove = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileRename rename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ReadDirFiles read_files = 1;
  if (has_read_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::read_files(this), output);
  }

  // .FileCreate create = 2;
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::create(this), output);
  }

  // .FileRemove remove = 3;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::remove(this), output);
  }

  // .FileRename rename = 4;
  if (has_rename()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::rename(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileAction)
}

::google::protobuf::uint8* FileAction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ReadDirFiles read_files = 1;
  if (has_read_files()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::read_files(this), target);
  }

  // .FileCreate create = 2;
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::create(this), target);
  }

  // .FileRemove remove = 3;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::remove(this), target);
  }

  // .FileRename rename = 4;
  if (has_rename()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::rename(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileAction)
  return target;
}

size_t FileAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (union_case()) {
    // .ReadDirFiles read_files = 1;
    case kReadFiles: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.read_files_);
      break;
    }
    // .FileCreate create = 2;
    case kCreate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.create_);
      break;
    }
    // .FileRemove remove = 3;
    case kRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.remove_);
      break;
    }
    // .FileRename rename = 4;
    case kRename: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.rename_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FileAction* source =
      ::google::protobuf::DynamicCastToGenerated<FileAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileAction)
    MergeFrom(*source);
  }
}

void FileAction::MergeFrom(const FileAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.union_case()) {
    case kReadFiles: {
      mutable_read_files()->::ReadDirFiles::MergeFrom(from.read_files());
      break;
    }
    case kCreate: {
      mutable_create()->::FileCreate::MergeFrom(from.create());
      break;
    }
    case kRemove: {
      mutable_remove()->::FileRemove::MergeFrom(from.remove());
      break;
    }
    case kRename: {
      mutable_rename()->::FileRename::MergeFrom(from.rename());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void FileAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAction::CopyFrom(const FileAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAction::IsInitialized() const {
  return true;
}

void FileAction::Swap(FileAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileAction::InternalSwap(FileAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FileAction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileResponse::InitAsDefaultInstance() {
  ::_FileResponse_default_instance_.dir_ = const_cast< ::FileDirectory*>(
      ::FileDirectory::internal_default_instance());
  ::_FileResponse_default_instance_.result_ = const_cast< ::ActionResult*>(
      ::ActionResult::internal_default_instance());
}
class FileResponse::HasBitSetters {
 public:
  static const ::FileDirectory& dir(const FileResponse* msg);
  static const ::ActionResult& result(const FileResponse* msg);
};

const ::FileDirectory&
FileResponse::HasBitSetters::dir(const FileResponse* msg) {
  return *msg->union_.dir_;
}
const ::ActionResult&
FileResponse::HasBitSetters::result(const FileResponse* msg) {
  return *msg->union_.result_;
}
void FileResponse::set_allocated_dir(::FileDirectory* dir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (dir) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    set_has_dir();
    union_.dir_ = dir;
  }
  // @@protoc_insertion_point(field_set_allocated:FileResponse.dir)
}
void FileResponse::set_allocated_result(::ActionResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    union_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:FileResponse.result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileResponse::kDirFieldNumber;
const int FileResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileResponse::FileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileResponse)
}
FileResponse::FileResponse(const FileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_union();
  switch (from.union_case()) {
    case kDir: {
      mutable_dir()->::FileDirectory::MergeFrom(from.dir());
      break;
    }
    case kResult: {
      mutable_result()->::ActionResult::MergeFrom(from.result());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FileResponse)
}

void FileResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileResponse_message_2eproto.base);
  clear_has_union();
}

FileResponse::~FileResponse() {
  // @@protoc_insertion_point(destructor:FileResponse)
  SharedDtor();
}

void FileResponse::SharedDtor() {
  if (has_union()) {
    clear_union();
  }
}

void FileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileResponse& FileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileResponse_message_2eproto.base);
  return *internal_default_instance();
}


void FileResponse::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:FileResponse)
  switch (union_case()) {
    case kDir: {
      delete union_.dir_;
      break;
    }
    case kResult: {
      delete union_.result_;
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void FileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_union();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .FileDirectory dir = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileDirectory::_InternalParse;
        object = msg->mutable_dir();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ActionResult result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ActionResult::_InternalParse;
        object = msg->mutable_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FileDirectory dir = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ActionResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileDirectory dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dir(this), output);
  }

  // .ActionResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileResponse)
}

::google::protobuf::uint8* FileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileDirectory dir = 1;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dir(this), target);
  }

  // .ActionResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileResponse)
  return target;
}

size_t FileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (union_case()) {
    // .FileDirectory dir = 1;
    case kDir: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.dir_);
      break;
    }
    // .ActionResult result = 2;
    case kResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.result_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileResponse)
    MergeFrom(*source);
  }
}

void FileResponse::MergeFrom(const FileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.union_case()) {
    case kDir: {
      mutable_dir()->::FileDirectory::MergeFrom(from.dir());
      break;
    }
    case kResult: {
      mutable_result()->::ActionResult::MergeFrom(from.result());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void FileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileResponse::CopyFrom(const FileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileResponse::IsInitialized() const {
  return true;
}

void FileResponse::Swap(FileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileResponse::InternalSwap(FileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransResponse::InitAsDefaultInstance() {
}
class FileTransResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransResponse::kIdFieldNumber;
const int FileTransResponse::kNameFieldNumber;
const int FileTransResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransResponse::FileTransResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransResponse)
}
FileTransResponse::FileTransResponse(const FileTransResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:FileTransResponse)
}

void FileTransResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransResponse_message_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
}

FileTransResponse::~FileTransResponse() {
  // @@protoc_insertion_point(destructor:FileTransResponse)
  SharedDtor();
}

void FileTransResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransResponse& FileTransResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransResponse_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransResponse.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .FileTransRe result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_result(static_cast<::FileTransRe>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransResponse.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileTransRe result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::FileTransRe >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .FileTransRe result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransResponse)
}

::google::protobuf::uint8* FileTransResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .FileTransRe result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransResponse)
  return target;
}

size_t FileTransResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .FileTransRe result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransResponse)
    MergeFrom(*source);
  }
}

void FileTransResponse::MergeFrom(const FileTransResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void FileTransResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransResponse::CopyFrom(const FileTransResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransResponse::IsInitialized() const {
  return true;
}

void FileTransResponse::Swap(FileTransResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransResponse::InternalSwap(FileTransResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata FileTransResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransJob::InitAsDefaultInstance() {
}
class FileTransJob::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransJob::kJobIdFieldNumber;
const int FileTransJob::kPathFieldNumber;
const int FileTransJob::kIncludeHiddenFieldNumber;
const int FileTransJob::kRecursiveFieldNumber;
const int FileTransJob::kPushFieldNumber;
const int FileTransJob::kAppWhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransJob::FileTransJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransJob)
}
FileTransJob::FileTransJob(const FileTransJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  app_who_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_who().size() > 0) {
    app_who_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_who_);
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&push_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(push_));
  // @@protoc_insertion_point(copy_constructor:FileTransJob)
}

void FileTransJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransJob_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_who_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(push_));
}

FileTransJob::~FileTransJob() {
  // @@protoc_insertion_point(destructor:FileTransJob)
  SharedDtor();
}

void FileTransJob::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_who_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransJob& FileTransJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransJob_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransJob::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_who_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(push_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_job_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransJob.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool include_hidden = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_include_hidden(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool recursive = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_recursive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool push = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_push(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string app_who = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransJob.app_who");
        object = msg->mutable_app_who();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransJob.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_hidden = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recursive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recursive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool push = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_who = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_who()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_who().data(), static_cast<int>(this->app_who().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransJob.app_who"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJob.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_hidden(), output);
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recursive(), output);
  }

  // bool push = 5;
  if (this->push() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->push(), output);
  }

  // string app_who = 6;
  if (this->app_who().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_who().data(), static_cast<int>(this->app_who().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJob.app_who");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->app_who(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransJob)
}

::google::protobuf::uint8* FileTransJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJob.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_hidden(), target);
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recursive(), target);
  }

  // bool push = 5;
  if (this->push() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->push(), target);
  }

  // string app_who = 6;
  if (this->app_who().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_who().data(), static_cast<int>(this->app_who().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJob.app_who");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->app_who(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransJob)
  return target;
}

size_t FileTransJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string app_who = 6;
  if (this->app_who().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_who());
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // bool include_hidden = 3;
  if (this->include_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool recursive = 4;
  if (this->recursive() != 0) {
    total_size += 1 + 1;
  }

  // bool push = 5;
  if (this->push() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransJob)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransJob* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransJob)
    MergeFrom(*source);
  }
}

void FileTransJob::MergeFrom(const FileTransJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.app_who().size() > 0) {

    app_who_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_who_);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.include_hidden() != 0) {
    set_include_hidden(from.include_hidden());
  }
  if (from.recursive() != 0) {
    set_recursive(from.recursive());
  }
  if (from.push() != 0) {
    set_push(from.push());
  }
}

void FileTransJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransJob::CopyFrom(const FileTransJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransJob::IsInitialized() const {
  return true;
}

void FileTransJob::Swap(FileTransJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransJob::InternalSwap(FileTransJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_who_.Swap(&other->app_who_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_id_, other->job_id_);
  swap(include_hidden_, other->include_hidden_);
  swap(recursive_, other->recursive_);
  swap(push_, other->push_);
}

::google::protobuf::Metadata FileTransJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransCreate::InitAsDefaultInstance() {
  ::_FileTransCreate_default_instance_._instance.get_mutable()->entry_ = const_cast< ::FileEntry*>(
      ::FileEntry::internal_default_instance());
}
class FileTransCreate::HasBitSetters {
 public:
  static const ::FileEntry& entry(const FileTransCreate* msg);
};

const ::FileEntry&
FileTransCreate::HasBitSetters::entry(const FileTransCreate* msg) {
  return *msg->entry_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransCreate::kJobIdFieldNumber;
const int FileTransCreate::kFileIdFieldNumber;
const int FileTransCreate::kSubDirFieldNumber;
const int FileTransCreate::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransCreate::FileTransCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransCreate)
}
FileTransCreate::FileTransCreate(const FileTransCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sub_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sub_dir().size() > 0) {
    sub_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_dir_);
  }
  if (from.has_entry()) {
    entry_ = new ::FileEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_id_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(file_id_));
  // @@protoc_insertion_point(copy_constructor:FileTransCreate)
}

void FileTransCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransCreate_message_2eproto.base);
  sub_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_id_) -
      reinterpret_cast<char*>(&entry_)) + sizeof(file_id_));
}

FileTransCreate::~FileTransCreate() {
  // @@protoc_insertion_point(destructor:FileTransCreate)
  SharedDtor();
}

void FileTransCreate::SharedDtor() {
  sub_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void FileTransCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransCreate& FileTransCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransCreate_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_id_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(file_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_job_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 file_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string sub_dir = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransCreate.sub_dir");
        object = msg->mutable_sub_dir();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .FileEntry entry = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileEntry::_InternalParse;
        object = msg->mutable_entry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_dir().data(), static_cast<int>(this->sub_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransCreate.sub_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileEntry entry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_id(), output);
  }

  // string sub_dir = 3;
  if (this->sub_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_dir().data(), static_cast<int>(this->sub_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransCreate.sub_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sub_dir(), output);
  }

  // .FileEntry entry = 4;
  if (this->has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::entry(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransCreate)
}

::google::protobuf::uint8* FileTransCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_id(), target);
  }

  // string sub_dir = 3;
  if (this->sub_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_dir().data(), static_cast<int>(this->sub_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransCreate.sub_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sub_dir(), target);
  }

  // .FileEntry entry = 4;
  if (this->has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::entry(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransCreate)
  return target;
}

size_t FileTransCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_dir = 3;
  if (this->sub_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_dir());
  }

  // .FileEntry entry = 4;
  if (this->has_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransCreate* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransCreate)
    MergeFrom(*source);
  }
}

void FileTransCreate::MergeFrom(const FileTransCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sub_dir().size() > 0) {

    sub_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_dir_);
  }
  if (from.has_entry()) {
    mutable_entry()->::FileEntry::MergeFrom(from.entry());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
}

void FileTransCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransCreate::CopyFrom(const FileTransCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransCreate::IsInitialized() const {
  return true;
}

void FileTransCreate::Swap(FileTransCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransCreate::InternalSwap(FileTransCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sub_dir_.Swap(&other->sub_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entry_, other->entry_);
  swap(job_id_, other->job_id_);
  swap(file_id_, other->file_id_);
}

::google::protobuf::Metadata FileTransCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransBlock::InitAsDefaultInstance() {
}
class FileTransBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransBlock::kJobIdFieldNumber;
const int FileTransBlock::kFileIdFieldNumber;
const int FileTransBlock::kFilenameFieldNumber;
const int FileTransBlock::kBlkIdFieldNumber;
const int FileTransBlock::kDataFieldNumber;
const int FileTransBlock::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransBlock::FileTransBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransBlock)
}
FileTransBlock::FileTransBlock(const FileTransBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:FileTransBlock)
}

void FileTransBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransBlock_message_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(compressed_));
}

FileTransBlock::~FileTransBlock() {
  // @@protoc_insertion_point(destructor:FileTransBlock)
  SharedDtor();
}

void FileTransBlock::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransBlock& FileTransBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransBlock_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(compressed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_job_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 file_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string filename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransBlock.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 blk_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_blk_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool compressed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_compressed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransBlock.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blk_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_id(), output);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransBlock.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // uint32 blk_id = 4;
  if (this->blk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blk_id(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // bool compressed = 6;
  if (this->compressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransBlock)
}

::google::protobuf::uint8* FileTransBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_id(), target);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransBlock.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // uint32 blk_id = 4;
  if (this->blk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blk_id(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // bool compressed = 6;
  if (this->compressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransBlock)
  return target;
}

size_t FileTransBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // int32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_id());
  }

  // uint32 blk_id = 4;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blk_id());
  }

  // bool compressed = 6;
  if (this->compressed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransBlock* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransBlock)
    MergeFrom(*source);
  }
}

void FileTransBlock::MergeFrom(const FileTransBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.blk_id() != 0) {
    set_blk_id(from.blk_id());
  }
  if (from.compressed() != 0) {
    set_compressed(from.compressed());
  }
}

void FileTransBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransBlock::CopyFrom(const FileTransBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransBlock::IsInitialized() const {
  return true;
}

void FileTransBlock::Swap(FileTransBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransBlock::InternalSwap(FileTransBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_id_, other->job_id_);
  swap(file_id_, other->file_id_);
  swap(blk_id_, other->blk_id_);
  swap(compressed_, other->compressed_);
}

::google::protobuf::Metadata FileTransBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransJobCancel::InitAsDefaultInstance() {
}
class FileTransJobCancel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransJobCancel::kJobIdFieldNumber;
const int FileTransJobCancel::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransJobCancel::FileTransJobCancel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransJobCancel)
}
FileTransJobCancel::FileTransJobCancel(const FileTransJobCancel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  job_id_ = from.job_id_;
  // @@protoc_insertion_point(copy_constructor:FileTransJobCancel)
}

void FileTransJobCancel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransJobCancel_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_ = 0;
}

FileTransJobCancel::~FileTransJobCancel() {
  // @@protoc_insertion_point(destructor:FileTransJobCancel)
  SharedDtor();
}

void FileTransJobCancel::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransJobCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransJobCancel& FileTransJobCancel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransJobCancel_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransJobCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransJobCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransJobCancel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransJobCancel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_job_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransJobCancel.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransJobCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransJobCancel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransJobCancel.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransJobCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransJobCancel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransJobCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransJobCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobCancel.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransJobCancel)
}

::google::protobuf::uint8* FileTransJobCancel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransJobCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobCancel.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransJobCancel)
  return target;
}

size_t FileTransJobCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransJobCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransJobCancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransJobCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransJobCancel* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransJobCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransJobCancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransJobCancel)
    MergeFrom(*source);
  }
}

void FileTransJobCancel::MergeFrom(const FileTransJobCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransJobCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
}

void FileTransJobCancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransJobCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransJobCancel::CopyFrom(const FileTransJobCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransJobCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransJobCancel::IsInitialized() const {
  return true;
}

void FileTransJobCancel::Swap(FileTransJobCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransJobCancel::InternalSwap(FileTransJobCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_id_, other->job_id_);
}

::google::protobuf::Metadata FileTransJobCancel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransJobReport::InitAsDefaultInstance() {
}
class FileTransJobReport::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransJobReport::kJobIdFieldNumber;
const int FileTransJobReport::kPathFieldNumber;
const int FileTransJobReport::kErrorFieldNumber;
const int FileTransJobReport::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransJobReport::FileTransJobReport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransJobReport)
}
FileTransJobReport::FileTransJobReport(const FileTransJobReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:FileTransJobReport)
}

void FileTransJobReport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransJobReport_message_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(result_));
}

FileTransJobReport::~FileTransJobReport() {
  // @@protoc_insertion_point(destructor:FileTransJobReport)
  SharedDtor();
}

void FileTransJobReport::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTransJobReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransJobReport& FileTransJobReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransJobReport_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransJobReport::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransJobReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransJobReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransJobReport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_job_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransJobReport.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string error = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileTransJobReport.error");
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .FileTransRe result = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_result(static_cast<::FileTransRe>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransJobReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransJobReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 job_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransJobReport.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileTransJobReport.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileTransRe result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::FileTransRe >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransJobReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransJobReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransJobReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransJobReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobReport.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobReport.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // .FileTransRe result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransJobReport)
}

::google::protobuf::uint8* FileTransJobReport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransJobReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobReport.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileTransJobReport.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // .FileTransRe result = 4;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransJobReport)
  return target;
}

size_t FileTransJobReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransJobReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // .FileTransRe result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransJobReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransJobReport)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransJobReport* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransJobReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransJobReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransJobReport)
    MergeFrom(*source);
  }
}

void FileTransJobReport::MergeFrom(const FileTransJobReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransJobReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void FileTransJobReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransJobReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransJobReport::CopyFrom(const FileTransJobReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransJobReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransJobReport::IsInitialized() const {
  return true;
}

void FileTransJobReport::Swap(FileTransJobReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransJobReport::InternalSwap(FileTransJobReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_id_, other->job_id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata FileTransJobReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileTransUpdate::InitAsDefaultInstance() {
  ::_FileTransUpdate_default_instance_.cancel_ = const_cast< ::FileTransJobCancel*>(
      ::FileTransJobCancel::internal_default_instance());
  ::_FileTransUpdate_default_instance_.report_ = const_cast< ::FileTransJobReport*>(
      ::FileTransJobReport::internal_default_instance());
}
class FileTransUpdate::HasBitSetters {
 public:
  static const ::FileTransJobCancel& cancel(const FileTransUpdate* msg);
  static const ::FileTransJobReport& report(const FileTransUpdate* msg);
};

const ::FileTransJobCancel&
FileTransUpdate::HasBitSetters::cancel(const FileTransUpdate* msg) {
  return *msg->union_.cancel_;
}
const ::FileTransJobReport&
FileTransUpdate::HasBitSetters::report(const FileTransUpdate* msg) {
  return *msg->union_.report_;
}
void FileTransUpdate::set_allocated_cancel(::FileTransJobCancel* cancel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (cancel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cancel, submessage_arena);
    }
    set_has_cancel();
    union_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:FileTransUpdate.cancel)
}
void FileTransUpdate::set_allocated_report(::FileTransJobReport* report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_union();
  if (report) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    set_has_report();
    union_.report_ = report;
  }
  // @@protoc_insertion_point(field_set_allocated:FileTransUpdate.report)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTransUpdate::kCancelFieldNumber;
const int FileTransUpdate::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTransUpdate::FileTransUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileTransUpdate)
}
FileTransUpdate::FileTransUpdate(const FileTransUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_union();
  switch (from.union_case()) {
    case kCancel: {
      mutable_cancel()->::FileTransJobCancel::MergeFrom(from.cancel());
      break;
    }
    case kReport: {
      mutable_report()->::FileTransJobReport::MergeFrom(from.report());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FileTransUpdate)
}

void FileTransUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileTransUpdate_message_2eproto.base);
  clear_has_union();
}

FileTransUpdate::~FileTransUpdate() {
  // @@protoc_insertion_point(destructor:FileTransUpdate)
  SharedDtor();
}

void FileTransUpdate::SharedDtor() {
  if (has_union()) {
    clear_union();
  }
}

void FileTransUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTransUpdate& FileTransUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileTransUpdate_message_2eproto.base);
  return *internal_default_instance();
}


void FileTransUpdate::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:FileTransUpdate)
  switch (union_case()) {
    case kCancel: {
      delete union_.cancel_;
      break;
    }
    case kReport: {
      delete union_.report_;
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void FileTransUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_union();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTransUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileTransUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .FileTransJobCancel cancel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileTransJobCancel::_InternalParse;
        object = msg->mutable_cancel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .FileTransJobReport report = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::FileTransJobReport::_InternalParse;
        object = msg->mutable_report();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTransUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileTransUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FileTransJobCancel cancel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FileTransJobReport report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileTransUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileTransUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTransUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileTransUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileTransJobCancel cancel = 1;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cancel(this), output);
  }

  // .FileTransJobReport report = 2;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::report(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileTransUpdate)
}

::google::protobuf::uint8* FileTransUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileTransJobCancel cancel = 1;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cancel(this), target);
  }

  // .FileTransJobReport report = 2;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::report(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransUpdate)
  return target;
}

size_t FileTransUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (union_case()) {
    // .FileTransJobCancel cancel = 1;
    case kCancel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.cancel_);
      break;
    }
    // .FileTransJobReport report = 2;
    case kReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *union_.report_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileTransUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTransUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<FileTransUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileTransUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileTransUpdate)
    MergeFrom(*source);
  }
}

void FileTransUpdate::MergeFrom(const FileTransUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileTransUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.union_case()) {
    case kCancel: {
      mutable_cancel()->::FileTransJobCancel::MergeFrom(from.cancel());
      break;
    }
    case kReport: {
      mutable_report()->::FileTransJobReport::MergeFrom(from.report());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void FileTransUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileTransUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransUpdate::CopyFrom(const FileTransUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransUpdate::IsInitialized() const {
  return true;
}

void FileTransUpdate::Swap(FileTransUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTransUpdate::InternalSwap(FileTransUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FileTransUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTransFilesRequest::InitAsDefaultInstance() {
}
class ApplyTransFilesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyTransFilesRequest::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTransFilesRequest::ApplyTransFilesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplyTransFilesRequest)
}
ApplyTransFilesRequest::ApplyTransFilesRequest(const ApplyTransFilesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:ApplyTransFilesRequest)
}

void ApplyTransFilesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyTransFilesRequest_message_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ApplyTransFilesRequest::~ApplyTransFilesRequest() {
  // @@protoc_insertion_point(destructor:ApplyTransFilesRequest)
  SharedDtor();
}

void ApplyTransFilesRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyTransFilesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTransFilesRequest& ApplyTransFilesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTransFilesRequest_message_2eproto.base);
  return *internal_default_instance();
}


void ApplyTransFilesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplyTransFilesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTransFilesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTransFilesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ApplyTransFilesRequest.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTransFilesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ApplyTransFilesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ApplyTransFilesRequest.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ApplyTransFilesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ApplyTransFilesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTransFilesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ApplyTransFilesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ApplyTransFilesRequest.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ApplyTransFilesRequest)
}

::google::protobuf::uint8* ApplyTransFilesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplyTransFilesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ApplyTransFilesRequest.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplyTransFilesRequest)
  return target;
}

size_t ApplyTransFilesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplyTransFilesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTransFilesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplyTransFilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTransFilesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTransFilesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplyTransFilesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplyTransFilesRequest)
    MergeFrom(*source);
  }
}

void ApplyTransFilesRequest::MergeFrom(const ApplyTransFilesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplyTransFilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ApplyTransFilesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplyTransFilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTransFilesRequest::CopyFrom(const ApplyTransFilesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplyTransFilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTransFilesRequest::IsInitialized() const {
  return true;
}

void ApplyTransFilesRequest::Swap(ApplyTransFilesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTransFilesRequest::InternalSwap(ApplyTransFilesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ApplyTransFilesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTransFilesResponse::InitAsDefaultInstance() {
}
class ApplyTransFilesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyTransFilesResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTransFilesResponse::ApplyTransFilesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplyTransFilesResponse)
}
ApplyTransFilesResponse::ApplyTransFilesResponse(const ApplyTransFilesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ApplyTransFilesResponse)
}

void ApplyTransFilesResponse::SharedCtor() {
  result_ = false;
}

ApplyTransFilesResponse::~ApplyTransFilesResponse() {
  // @@protoc_insertion_point(destructor:ApplyTransFilesResponse)
  SharedDtor();
}

void ApplyTransFilesResponse::SharedDtor() {
}

void ApplyTransFilesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTransFilesResponse& ApplyTransFilesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTransFilesResponse_message_2eproto.base);
  return *internal_default_instance();
}


void ApplyTransFilesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplyTransFilesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTransFilesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTransFilesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTransFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ApplyTransFilesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ApplyTransFilesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ApplyTransFilesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTransFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ApplyTransFilesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ApplyTransFilesResponse)
}

::google::protobuf::uint8* ApplyTransFilesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplyTransFilesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplyTransFilesResponse)
  return target;
}

size_t ApplyTransFilesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplyTransFilesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTransFilesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplyTransFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTransFilesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTransFilesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplyTransFilesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplyTransFilesResponse)
    MergeFrom(*source);
  }
}

void ApplyTransFilesResponse::MergeFrom(const ApplyTransFilesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplyTransFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ApplyTransFilesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplyTransFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTransFilesResponse::CopyFrom(const ApplyTransFilesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplyTransFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTransFilesResponse::IsInitialized() const {
  return true;
}

void ApplyTransFilesResponse::Swap(ApplyTransFilesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTransFilesResponse::InternalSwap(ApplyTransFilesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata ApplyTransFilesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

RemoteService::~RemoteService() {}

const ::google::protobuf::ServiceDescriptor* RemoteService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_service_descriptors_message_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* RemoteService::GetDescriptor() {
  return descriptor();
}

void RemoteService::login(::google::protobuf::RpcController* controller,
                         const ::LoginRequest*,
                         ::LoginResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method login() not implemented.");
  done->Run();
}

void RemoteService::query_peerinfo(::google::protobuf::RpcController* controller,
                         const ::PeerInfo*,
                         ::PeerInfo*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query_peerinfo() not implemented.");
  done->Run();
}

void RemoteService::misc(::google::protobuf::RpcController* controller,
                         const ::JsonMessage*,
                         ::JsonMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method misc() not implemented.");
  done->Run();
}

void RemoteService::fsaction(::google::protobuf::RpcController* controller,
                         const ::FileAction*,
                         ::FileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fsaction() not implemented.");
  done->Run();
}

void RemoteService::filetrans_job(::google::protobuf::RpcController* controller,
                         const ::FileTransJob*,
                         ::FileTransResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method filetrans_job() not implemented.");
  done->Run();
}

void RemoteService::filetrans_create(::google::protobuf::RpcController* controller,
                         const ::FileTransCreate*,
                         ::FileTransResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method filetrans_create() not implemented.");
  done->Run();
}

void RemoteService::filetrans_block(::google::protobuf::RpcController* controller,
                         const ::FileTransBlock*,
                         ::FileTransResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method filetrans_block() not implemented.");
  done->Run();
}

void RemoteService::filetrans_update(::google::protobuf::RpcController* controller,
                         const ::FileTransUpdate*,
                         ::FileTransResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method filetrans_update() not implemented.");
  done->Run();
}

void RemoteService::apply_trans_files(::google::protobuf::RpcController* controller,
                         const ::ApplyTransFilesRequest*,
                         ::ApplyTransFilesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method apply_trans_files() not implemented.");
  done->Run();
}

void RemoteService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_2eproto[0]);
  switch(method->index()) {
    case 0:
      login(controller,
             ::google::protobuf::down_cast<const ::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::LoginResponse*>(response),
             done);
      break;
    case 1:
      query_peerinfo(controller,
             ::google::protobuf::down_cast<const ::PeerInfo*>(request),
             ::google::protobuf::down_cast< ::PeerInfo*>(response),
             done);
      break;
    case 2:
      misc(controller,
             ::google::protobuf::down_cast<const ::JsonMessage*>(request),
             ::google::protobuf::down_cast< ::JsonMessage*>(response),
             done);
      break;
    case 3:
      fsaction(controller,
             ::google::protobuf::down_cast<const ::FileAction*>(request),
             ::google::protobuf::down_cast< ::FileResponse*>(response),
             done);
      break;
    case 4:
      filetrans_job(controller,
             ::google::protobuf::down_cast<const ::FileTransJob*>(request),
             ::google::protobuf::down_cast< ::FileTransResponse*>(response),
             done);
      break;
    case 5:
      filetrans_create(controller,
             ::google::protobuf::down_cast<const ::FileTransCreate*>(request),
             ::google::protobuf::down_cast< ::FileTransResponse*>(response),
             done);
      break;
    case 6:
      filetrans_block(controller,
             ::google::protobuf::down_cast<const ::FileTransBlock*>(request),
             ::google::protobuf::down_cast< ::FileTransResponse*>(response),
             done);
      break;
    case 7:
      filetrans_update(controller,
             ::google::protobuf::down_cast<const ::FileTransUpdate*>(request),
             ::google::protobuf::down_cast< ::FileTransResponse*>(response),
             done);
      break;
    case 8:
      apply_trans_files(controller,
             ::google::protobuf::down_cast<const ::ApplyTransFilesRequest*>(request),
             ::google::protobuf::down_cast< ::ApplyTransFilesResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RemoteService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::LoginRequest::default_instance();
    case 1:
      return ::PeerInfo::default_instance();
    case 2:
      return ::JsonMessage::default_instance();
    case 3:
      return ::FileAction::default_instance();
    case 4:
      return ::FileTransJob::default_instance();
    case 5:
      return ::FileTransCreate::default_instance();
    case 6:
      return ::FileTransBlock::default_instance();
    case 7:
      return ::FileTransUpdate::default_instance();
    case 8:
      return ::ApplyTransFilesRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RemoteService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::LoginResponse::default_instance();
    case 1:
      return ::PeerInfo::default_instance();
    case 2:
      return ::JsonMessage::default_instance();
    case 3:
      return ::FileResponse::default_instance();
    case 4:
      return ::FileTransResponse::default_instance();
    case 5:
      return ::FileTransResponse::default_instance();
    case 6:
      return ::FileTransResponse::default_instance();
    case 7:
      return ::FileTransResponse::default_instance();
    case 8:
      return ::ApplyTransFilesResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RemoteService_Stub::RemoteService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RemoteService_Stub::RemoteService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RemoteService_Stub::~RemoteService_Stub() {
  if (owns_channel_) delete channel_;
}

void RemoteService_Stub::login(::google::protobuf::RpcController* controller,
                              const ::LoginRequest* request,
                              ::LoginResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RemoteService_Stub::query_peerinfo(::google::protobuf::RpcController* controller,
                              const ::PeerInfo* request,
                              ::PeerInfo* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RemoteService_Stub::misc(::google::protobuf::RpcController* controller,
                              const ::JsonMessage* request,
                              ::JsonMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RemoteService_Stub::fsaction(::google::protobuf::RpcController* controller,
                              const ::FileAction* request,
                              ::FileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void RemoteService_Stub::filetrans_job(::google::protobuf::RpcController* controller,
                              const ::FileTransJob* request,
                              ::FileTransResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void RemoteService_Stub::filetrans_create(::google::protobuf::RpcController* controller,
                              const ::FileTransCreate* request,
                              ::FileTransResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void RemoteService_Stub::filetrans_block(::google::protobuf::RpcController* controller,
                              const ::FileTransBlock* request,
                              ::FileTransResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void RemoteService_Stub::filetrans_update(::google::protobuf::RpcController* controller,
                              const ::FileTransUpdate* request,
                              ::FileTransResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void RemoteService_Stub::apply_trans_files(::google::protobuf::RpcController* controller,
                              const ::ApplyTransFilesRequest* request,
                              ::ApplyTransFilesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::LoginRequest* Arena::CreateMaybeMessage< ::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginResponse* Arena::CreateMaybeMessage< ::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::JsonMessage* Arena::CreateMaybeMessage< ::JsonMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JsonMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PeerInfo* Arena::CreateMaybeMessage< ::PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OptionMessage* Arena::CreateMaybeMessage< ::OptionMessage >(Arena* arena) {
  return Arena::CreateInternal< ::OptionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FileEntry* Arena::CreateMaybeMessage< ::FileEntry >(Arena* arena) {
  return Arena::CreateInternal< ::FileEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::FileDirectory* Arena::CreateMaybeMessage< ::FileDirectory >(Arena* arena) {
  return Arena::CreateInternal< ::FileDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionResult* Arena::CreateMaybeMessage< ::ActionResult >(Arena* arena) {
  return Arena::CreateInternal< ::ActionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadDirFiles* Arena::CreateMaybeMessage< ::ReadDirFiles >(Arena* arena) {
  return Arena::CreateInternal< ::ReadDirFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::FileRemove* Arena::CreateMaybeMessage< ::FileRemove >(Arena* arena) {
  return Arena::CreateInternal< ::FileRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::FileRename* Arena::CreateMaybeMessage< ::FileRename >(Arena* arena) {
  return Arena::CreateInternal< ::FileRename >(arena);
}
template<> PROTOBUF_NOINLINE ::FileCreate* Arena::CreateMaybeMessage< ::FileCreate >(Arena* arena) {
  return Arena::CreateInternal< ::FileCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::FileAction* Arena::CreateMaybeMessage< ::FileAction >(Arena* arena) {
  return Arena::CreateInternal< ::FileAction >(arena);
}
template<> PROTOBUF_NOINLINE ::FileResponse* Arena::CreateMaybeMessage< ::FileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::FileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransResponse* Arena::CreateMaybeMessage< ::FileTransResponse >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransJob* Arena::CreateMaybeMessage< ::FileTransJob >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransJob >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransCreate* Arena::CreateMaybeMessage< ::FileTransCreate >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransBlock* Arena::CreateMaybeMessage< ::FileTransBlock >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransJobCancel* Arena::CreateMaybeMessage< ::FileTransJobCancel >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransJobCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransJobReport* Arena::CreateMaybeMessage< ::FileTransJobReport >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransJobReport >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransUpdate* Arena::CreateMaybeMessage< ::FileTransUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::FileTransUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::ApplyTransFilesRequest* Arena::CreateMaybeMessage< ::ApplyTransFilesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ApplyTransFilesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ApplyTransFilesResponse* Arena::CreateMaybeMessage< ::ApplyTransFilesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ApplyTransFilesResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
