package ipc

service Common {
    compatible, // check the proto version whether it is compatible
    syncConfig,
    syncPeers,
    tryConnect,
    tryTargetSpace,
    tryApplist,
    chatMessage,
    miscMessage, // any message by json format
    commNotify, // notify a common related report from backend
}

object Config {
    // array of config. mode="1" password="123456" savedir="/home/user/"
    ao [{
        string name
        string value
    }]
}

object PeerInfo {
    // peer info
    string uuid
    string ipv4
    string username
    string hostname
    int32 device_os
    string proto_version
    bool mode
}

object PeerList {
    // peer info list
    int32 code
    [PeerInfo] peers
}

object ConnTarget {
    // target connection
    string ipv4
    uint32 port
    string authkey
}

object ConnResult {
    // try connect result
    int32 code
    string reason
}

object SpaceSize {
    // get target availables space size
    string dir
    uint64 size
}

object AppList {
    // get target portable app list
    string displayname
    int32 run_type    // linux or  wine
    string pkgname  // full package name
    string version
    string vonder
}

object Chat {
    // the chat message
    string username // user name on OS
    string text
}

// notify a common report, ig. network status, dicovery result, etc
object NotifyComm {
    int32 id
    int32 type // type defined in constant::CommType
    int32 result
    string content // the json format content what want to delivery
}

