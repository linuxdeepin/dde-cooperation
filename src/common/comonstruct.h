// Autogenerated.
// DO NOT EDIT. All changes will be undone.
#pragma once

#include "co/json.h"

struct SendResult {
    uint32 protocolType;
    int32 errorType;
    fastring data;

    void from_json(const co::Json& _x_) {
        protocolType = (uint32)_x_.get("protocolType").as_int64();
        errorType = (int32)_x_.get("errorType").as_int64();
        data = _x_.get("data").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("protocolType", protocolType);
        _x_.add_member("errorType", errorType);
        _x_.add_member("data", data);
        return _x_;
    }
};

struct UserLoginInfo {
    fastring name;
    fastring auth;
    fastring my_uid;
    fastring my_name;
    fastring session_id;
    fastring selfappName;
    fastring appName;
    fastring version;
    fastring ip;

    void from_json(const co::Json& _x_) {
        name = _x_.get("name").as_c_str();
        auth = _x_.get("auth").as_c_str();
        my_uid = _x_.get("my_uid").as_c_str();
        my_name = _x_.get("my_name").as_c_str();
        session_id = _x_.get("session_id").as_c_str();
        selfappName = _x_.get("selfappName").as_c_str();
        appName = _x_.get("appName").as_c_str();
        version = _x_.get("version").as_c_str();
        ip = _x_.get("ip").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("name", name);
        _x_.add_member("auth", auth);
        _x_.add_member("my_uid", my_uid);
        _x_.add_member("my_name", my_name);
        _x_.add_member("session_id", session_id);
        _x_.add_member("selfappName", selfappName);
        _x_.add_member("appName", appName);
        _x_.add_member("version", version);
        _x_.add_member("ip", ip);
        return _x_;
    }
};

struct PeerInfo {
    fastring username;
    fastring hostname;
    fastring platform;
    fastring version;
    bool privacy_mode;

    void from_json(const co::Json& _x_) {
        username = _x_.get("username").as_c_str();
        hostname = _x_.get("hostname").as_c_str();
        platform = _x_.get("platform").as_c_str();
        version = _x_.get("version").as_c_str();
        privacy_mode = _x_.get("privacy_mode").as_bool();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("username", username);
        _x_.add_member("hostname", hostname);
        _x_.add_member("platform", platform);
        _x_.add_member("version", version);
        _x_.add_member("privacy_mode", privacy_mode);
        return _x_;
    }
};

struct UserLoginResultInfo {
    PeerInfo peer;
    fastring token;
    fastring appName;
    bool result;

    void from_json(const co::Json& _x_) {
        peer.from_json(_x_.get("peer"));
        token = _x_.get("token").as_c_str();
        appName = _x_.get("appName").as_c_str();
        result = _x_.get("result").as_bool();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("peer", peer.as_json());
        _x_.add_member("token", token);
        _x_.add_member("appName", appName);
        _x_.add_member("result", result);
        return _x_;
    }
};

struct MiscInfo {
    fastring appName;
    fastring json;

    void from_json(const co::Json& _x_) {
        appName = _x_.get("appName").as_c_str();
        json = _x_.get("json").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("appName", appName);
        _x_.add_member("json", json);
        return _x_;
    }
};

struct FileTransJob {
    int32 job_id;
    fastring path;
    fastring save_path;
    bool include_hidden;
    bool sub;
    bool write;
    fastring app_who;
    fastring targetAppname;
    fastring ip;

    void from_json(const co::Json& _x_) {
        job_id = (int32)_x_.get("job_id").as_int64();
        path = _x_.get("path").as_c_str();
        save_path = _x_.get("save_path").as_c_str();
        include_hidden = _x_.get("include_hidden").as_bool();
        sub = _x_.get("sub").as_bool();
        write = _x_.get("write").as_bool();
        app_who = _x_.get("app_who").as_c_str();
        targetAppname = _x_.get("targetAppname").as_c_str();
        ip = _x_.get("ip").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("job_id", job_id);
        _x_.add_member("path", path);
        _x_.add_member("save_path", save_path);
        _x_.add_member("include_hidden", include_hidden);
        _x_.add_member("sub", sub);
        _x_.add_member("write", write);
        _x_.add_member("app_who", app_who);
        _x_.add_member("targetAppname", targetAppname);
        _x_.add_member("ip", ip);
        return _x_;
    }
};

struct FileEntry {
    int32 filetype;
    fastring name;
    bool hidden;
    int64 size;
    int64 modified_time;
    fastring appName;
    fastring rcvappName;

    void from_json(const co::Json& _x_) {
        filetype = (int32)_x_.get("filetype").as_int64();
        name = _x_.get("name").as_c_str();
        hidden = _x_.get("hidden").as_bool();
        size = (int64)_x_.get("size").as_int64();
        modified_time = (int64)_x_.get("modified_time").as_int64();
        appName = _x_.get("appName").as_c_str();
        rcvappName = _x_.get("rcvappName").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("filetype", filetype);
        _x_.add_member("name", name);
        _x_.add_member("hidden", hidden);
        _x_.add_member("size", size);
        _x_.add_member("modified_time", modified_time);
        _x_.add_member("appName", appName);
        _x_.add_member("rcvappName", rcvappName);
        return _x_;
    }
};

struct FileTransCreate {
    int32 job_id;
    int32 file_id;
    fastring sub_dir;
    FileEntry entry;

    void from_json(const co::Json& _x_) {
        job_id = (int32)_x_.get("job_id").as_int64();
        file_id = (int32)_x_.get("file_id").as_int64();
        sub_dir = _x_.get("sub_dir").as_c_str();
        entry.from_json(_x_.get("entry"));
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("job_id", job_id);
        _x_.add_member("file_id", file_id);
        _x_.add_member("sub_dir", sub_dir);
        _x_.add_member("entry", entry.as_json());
        return _x_;
    }
};

struct FileTransResponse {
    int32 id;
    fastring name;
    int32 result;

    void from_json(const co::Json& _x_) {
        id = (int32)_x_.get("id").as_int64();
        name = _x_.get("name").as_c_str();
        result = (int32)_x_.get("result").as_int64();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("id", id);
        _x_.add_member("name", name);
        _x_.add_member("result", result);
        return _x_;
    }
};

struct FileTransBlock {
    int32 job_id;
    int32 file_id;
    fastring filename;
    uint32 blk_id;
    bool compressed;

    void from_json(const co::Json& _x_) {
        job_id = (int32)_x_.get("job_id").as_int64();
        file_id = (int32)_x_.get("file_id").as_int64();
        filename = _x_.get("filename").as_c_str();
        blk_id = (uint32)_x_.get("blk_id").as_int64();
        compressed = _x_.get("compressed").as_bool();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("job_id", job_id);
        _x_.add_member("file_id", file_id);
        _x_.add_member("filename", filename);
        _x_.add_member("blk_id", blk_id);
        _x_.add_member("compressed", compressed);
        return _x_;
    }
};

struct FileTransJobCancel {
    int32 job_id;
    fastring path;

    void from_json(const co::Json& _x_) {
        job_id = (int32)_x_.get("job_id").as_int64();
        path = _x_.get("path").as_c_str();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("job_id", job_id);
        _x_.add_member("path", path);
        return _x_;
    }
};

struct FileTransJobReport {
    int32 job_id;
    fastring path;
    fastring error;
    int32 result;

    void from_json(const co::Json& _x_) {
        job_id = (int32)_x_.get("job_id").as_int64();
        path = _x_.get("path").as_c_str();
        error = _x_.get("error").as_c_str();
        result = (int32)_x_.get("result").as_int64();
    }

    co::Json as_json() const {
        co::Json _x_;
        _x_.add_member("job_id", job_id);
        _x_.add_member("path", path);
        _x_.add_member("error", error);
        _x_.add_member("result", result);
        return _x_;
    }
};

